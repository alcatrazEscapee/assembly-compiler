# Generated by Assembly Auto-Compiler by Alex O'Neill
# Setup
    .equ            LAST_RAM_WORD, 0x007FFFFC
    .equ            JTAG_UART_BASE, 0x10001000
    .equ            DATA_OFFSET, 0
    .equ            STATUS_OFFSET, 4
    .equ            WSPACE_MASK, 0xFFFF
    .global         _start
    .org            0x00000000
    .text

# Entry point
_start:
    movia           sp, LAST_RAM_WORD
    movia           r2, message
    call            PrintString
    movia           r2, list
    ldw             r3, size(r0)
    call            PrintHexList
_end:
    br              _end

# ========== PrintString ==========
PrintString:
    subi            sp, sp, 12
    stw             r2, 8(sp)
    stw             r3, 4(sp)
    stw             ra, 0(sp)

    mov             r3, r2
    ldb             r2, 0(r3)
_while1:
    call            PrintChar
    addi            r3, r3, 1
    ldb             r2, 0(r3)
    bne             r2, r0, _while1

    ldw             r2, 8(sp)
    ldw             r3, 4(sp)
    ldw             ra, 0(sp)
    addi            sp, sp, 12
    ret

# ========== PrintChar ==========
PrintChar:
    subi            sp, sp, 8
    stw             r3, 4(sp)
    stw             r4, 0(sp)

    movia           r3, JTAG_UART_BASE
_while2:
    ldwio           r4, STATUS_OFFSET(r3)
    andhi           r4, r4, WSPACE_MASK
    beq             r4, r0, _while2
    stwio           r2, DATA_OFFSET(r3)

    ldw             r3, 4(sp)
    ldw             r4, 0(sp)
    addi            sp, sp, 8
    ret

# ========== PrintHexDigit ==========
PrintHexDigit:
    subi            sp, sp, 12
    stw             r2, 8(sp)
    stw             r4, 4(sp)
    stw             ra, 0(sp)

    # Takes r3 as an argument
    subi            r4, r3, 10
    bge             r4, r0, _if1
    addi            r2, r3, '0'
    br              _else1
_if1:
    addi            r2, r3, 'A'
_else1:
    call            PrintChar

    ldw             r2, 8(sp)
    ldw             r4, 4(sp)
    ldw             ra, 0(sp)
    addi            sp, sp, 12
    ret

# ========== PrintHexList ==========
PrintHexList:
    subi            sp, sp, 16
    stw             r2, 12(sp)
    stw             r3, 8(sp)
    stw             r4, 4(sp)
    stw             ra, 0(sp)

    # r2 = the list pointer
    # r3 = the size of the list
    mov             r4, r2
_while3:
    ldw             r2, 0(r4)
    call            PrintHexDigit
    movi            r2, ','
    call            PrintChar
    subi            r3, r3, 1
    addi            r4, r4, 4
    bgt             r3, r0, _while3

    ldw             r2, 12(sp)
    ldw             r3, 8(sp)
    ldw             r4, 4(sp)
    ldw             ra, 0(sp)
    addi            sp, sp, 16
    ret

# Word-Aligned Variables
    .org            0x00001000

list:
    .word           0, 1, 4, 9, 13, 15
size:
    .word           6

# Random Variables

message:
    .asciz          "Hello World!\n"

# End of Assembly Source
    .end